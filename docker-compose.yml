version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: appdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrations:
    build:
      context: .
      dockerfile: Dockerfile
      target: migration-runner
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/appdb
      NODE_ENV: production
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET:-production-secret-key-min-32-chars-change-me-please}
        BETTER_AUTH_URL: ${BETTER_AUTH_URL:-http://localhost:3000}
        DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/appdb}
        ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
        PASSKEY_RP_ID: ${PASSKEY_RP_ID:-localhost}
    container_name: app-template-app
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/appdb
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET:-production-secret-key-min-32-chars-change-me-please}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL:-http://localhost:3000}
      NODE_ENV: production
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      PASSKEY_RP_ID: ${PASSKEY_RP_ID:-localhost}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully

volumes:
  postgres_data:
